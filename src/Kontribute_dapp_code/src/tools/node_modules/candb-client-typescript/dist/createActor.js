"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createActor = void 0;
const agent_1 = require("@dfinity/agent");
const node_fetch_1 = __importDefault(require("node-fetch"));
/**
 * Gets the appropriate fetch for the given environment (i.e. browser, node)
 *
 * @ignore
 * @returns fetch
 */
function getDefaultFetch() {
    if (typeof window !== "undefined") {
        // Browser context
        if (window.fetch) {
            const defaultFetch = window.fetch.bind(window);
            return defaultFetch;
        }
        throw new Error("Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.");
    }
    else if (typeof global !== "undefined") {
        return node_fetch_1.default;
    }
    // @ts-ignore
    const self = this;
    if (typeof self !== "undefined") {
        if (self.fetch) {
            return self.fetch;
        }
    }
    throw new Error("Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.");
}
function createActor({ IDL, canisterId, agentOptions, actorConfig, }) {
    const agent = new agent_1.HttpAgent(Object.assign(Object.assign({ fetch: getDefaultFetch() }, agentOptions), { identity: agentOptions.identity || new agent_1.AnonymousIdentity() }));
    if (process.env.NODE_ENV !== "production") {
        agent.fetchRootKey().catch((err) => {
            console.warn("Unable to fetch root key. Check to ensure that your local replica is running");
            console.error(err);
        });
    }
    return agent_1.Actor.createActor(IDL, Object.assign({ agent,
        canisterId }, actorConfig));
}
exports.createActor = createActor;
//# sourceMappingURL=createActor.js.map