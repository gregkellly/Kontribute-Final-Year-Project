"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexClient = void 0;
const agent_1 = require("@dfinity/agent");
const principal_1 = require("@dfinity/principal");
const management_idl_1 = __importDefault(require("./management_idl"));
const createActor_1 = require("./createActor");
// TODO: Look into how I can force the developer to specify this type in the class instantiation (require the type to be specified)
/**
 * Client used to interact with the CanDB Index Canister
 *
 * @example
 * ```
 * import { IndexClient } from 'candb-client-typescript';
 * import { IndexCanister } from "../project/src/declarations/index/index.did"; // from generated index canister declaration files
 * import { idlFactory as MyIndexCanisterIDL } from "../project/src/declarations/index"; // from generated index canister declaration files
 *
 * const indexClient = new IndexClient<IndexCanister>({
 *   IDL: IndexCanisterIDL,
 *   canisterId: <insert_index_canister_id>,
 *   agentOptions: {
 *     host: <insert_host>,
 *     identity: <insert_identity>
 *   },
 * });
 * ```
 *
 */
class IndexClient {
    constructor(options) {
        this.indexCanisterId = options.canisterId;
        this.agentOptions = Object.assign(Object.assign({}, options.agentOptions), { identity: options.agentOptions.identity || new agent_1.AnonymousIdentity() });
        this.indexCanisterActor =
            (0, createActor_1.createActor)(options);
        this.canisterMap = new Map();
    }
    /**
     *
     * @returns {Identity} returns the identity used by the {@link IndexClient}
     */
    getIdentity() {
        return this.agentOptions.identity;
    }
    /**
     * Retrieves a list of canisterIds associated with the provided PK
     *
     * @param PK The partition key
     * @param useCache The IndexClient stores a cache of PK to list of canisterIds. By default, the cache is not used and requests are made to the index canister. It is not recommended to use the cache when making update calls
     * @returns {string[]}
     */
    async getCanistersForPK(PK, useCache = false) {
        const canisterIds = useCache === true
            ? this.canisterMap.get(PK) ||
                (await this.indexCanisterActor.getCanistersByPK(PK))
            : await this.indexCanisterActor.getCanistersByPK(PK);
        this.canisterMap.set(PK, canisterIds);
        return canisterIds;
    }
    /**
     * Upgrades the index canister
     *
     * Calls the management canister `install_code` method with mode = upgrade and the provided wasm and arguments
     *
     * @param wasmModule The "Blob-ified" wasm module that will upgrade the index canister
     * @param args any arguments to be passed along with the upgrade
     * @returns {Promise<undefined>}
     */
    upgradeIndexCanister(wasmModule, args = []) {
        return (0, createActor_1.createActor)({
            IDL: management_idl_1.default,
            canisterId: "aaaaa-aa",
            agentOptions: this.agentOptions,
        }).install_code({
            mode: { upgrade: null },
            canister_id: principal_1.Principal.fromText(this.indexCanisterId),
            wasm_module: wasmModule,
            arg: args,
        });
    }
}
exports.IndexClient = IndexClient;
//# sourceMappingURL=IndexClient.js.map